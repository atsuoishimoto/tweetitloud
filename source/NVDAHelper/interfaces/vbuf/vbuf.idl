//vbuf.idl

import "wtypes.idl";

#define DLLEXPORT __declspec(dllexport)

/**
 * Renders content in to a virtual buffer
 */
[
uuid(28efdf2b-039b-48ec-b4d5-230eee90d186),
version(2.0)
]
interface VBuf {

	typedef [context_handle] void* VBufRemote_bufferHandle_t;
	typedef long VBufRemote_nodeHandle_t;

/**
 * Creates a new virtualBuffer
 * @param bindingHandle the binding handle for the inproc worker's rpc server
 * @param docHandle uniquely identifies the document or window being virtualized
 * @param ID uniquely identifies the object with in the document or window where rendering should start from
 * @param backendName The name of the backend (the path to the correct dll will be calculated automatically)
 * @return a handle identifying the new virtual buffer.
 */
	DLLEXPORT VBufRemote_bufferHandle_t createBuffer([in] handle_t bindingHandle, [in] int docHandle, [in] int ID, [in,string] const wchar_t* backendName);

/**
 * Destroies a virtual buffer
 * @param buffer a pointer to the virtual buffer you want to destroy
 */
	DLLEXPORT void destroyBuffer(VBufRemote_bufferHandle_t* buffer);

/**
 * Calculates the start and end character offsets of the given node in the buffer.
 * @param buffer the virtual buffer to use
 * @param node the node you want the offsets of.
 * @param startOffset memory where this method can place the found start offset.
 * @param endOffset memory where this method can place the found end offset.
 * @return true if successful, false otherwize.
 */
	DLLEXPORT int getFieldNodeOffsets([in] VBufRemote_bufferHandle_t buffer, [in] VBufRemote_nodeHandle_t node, [out] int *startOffset, [out] int *endOffset);

/**
 * finds out if a given field is positioned at a given character offset in this buffer.
 * @param buffer the virtual buffer you are interested in
 * @param node the field you are interested in.
 * @param offset the character offset you are interested in.
 * @return true if the field is at the offset, false otherwise.
 */
	DLLEXPORT int isFieldNodeAtOffset([in] VBufRemote_bufferHandle_t buffer, [in] VBufRemote_nodeHandle_t node, [in] int offset);

/**
 * locates the text field node at the given offset
 * @param buffer the virtual buffer to use
 * @param offset the offset to use
 * @param nodeStartOffset memory where the found text field's start offset will be placed.
 * @param nodeEndOffset memory where the found text field's end offset will be placed.
 * @return the located text field node.
 */
	DLLEXPORT VBufRemote_nodeHandle_t locateTextFieldNodeAtOffset([in] VBufRemote_bufferHandle_t buffer, [in] int offset, [out] int *nodeStartOffset, [out] int *nodeEndOffset);

/**
 * locates the deepest control field node at the given offset
 * @param buffer the virtual buffer to use
 * @param offset the offset to use
 * @param startOffset memory where the found text field's start offset will be placed.
 * @param endOffset memory where the found text field's end offset will be placed.
 * @param docHandle memory where the docHandle of the found control field node will be placed.
 * @param ID memory where the ID of the found control field node will be placed.
 * @return the located control field node.
 */
	DLLEXPORT  VBufRemote_nodeHandle_t locateControlFieldNodeAtOffset([in] VBufRemote_bufferHandle_t buffer, [in] int offset, [out] int *startOffset, [out] int *endOffset, [out] int* docHandle, [out] int* ID);

/**
 * locates the controlFieldNode with the given identifier
 * @param buffer the virtual buffer to use
 * @param docHandle the docHandle of the control field node you wish to find
 * @param ID the ID of the control field node you wish to find
 * @return the controlFieldNode with the given identifier
 */
	DLLEXPORT VBufRemote_nodeHandle_t getControlFieldNodeWithIdentifier([in] VBufRemote_bufferHandle_t buffer, [in] int docHandle, [in] int ID);

/**
 * Finds a field node that contains particular attributes.
 * @param buffer the virtual buffer to use
 * @param offset offset in the buffer to start searching from
 * @param direction which direction to search
 * @param attribsString the attributes the node should contain
 * @param startOffset memory where the start offset of the found node can be placed
 * @param endOffset memory where the end offset of the found node will be placed
 * @return the found field node
 */
	DLLEXPORT VBufRemote_nodeHandle_t findNodeByAttributes([in] VBufRemote_bufferHandle_t buffer, [in] int offset, [in] int direction, [in,string] const wchar_t* attribsString, [out] int *startOffset, [out] int *endOffset);

/**
 * Retreaves the current selection offsets for the buffer
 * @param buffer the virtual buffer to use
 * @param startOffset memory where the start offset of the selection will be placed
 * @param endOffset memory where the end offset of the selection will be placed
 * @return true if successfull, false otherwize.
 */
	DLLEXPORT int getSelectionOffsets([in] VBufRemote_bufferHandle_t buffer, [out] int* startOffset, [out] int *endOffset);

/**
 * sets the selection offsets for the buffer.
 * @param buffer the virtual buffer to use
 * @param startOffset the offset the start of the selection should be set to.
 * @param endOffset the offset the end of the selection should be set to.
 * @return true if successfull, false otherwize.
 */
	DLLEXPORT int setSelectionOffsets([in] VBufRemote_bufferHandle_t buffer, [in] int startOffset, [in] int endOffset);
 
/**
 * retreaves the length of all the text in the buffer.
 * @param buffer the virtual buffer to use
 * @return the length in characters of the text
 */
	DLLEXPORT int getTextLength([in] VBufRemote_bufferHandle_t buffer) const;

/**
 * Retreaves the text in the buffer between given offsets, optionally containing markup.
 * @param buffer the virtual buffer to use
 * @param startOffset the offset to start from
 * @param endOffset the offset to end at. Use -1 to mean end of buffer.
 * @param text: receives a pointer to the text in the given range
 * @param useMarkup if true then markup is included in the text denoting field starts and ends.
 * @return the text.
 */
	DLLEXPORT int getTextInRange([in] VBufRemote_bufferHandle_t buffer, [in] int startOffset, [in] int endOffset, [out,string] BSTR* text, [in] int useMarkup);

/**
 * Expands the given offset to the start and end offsets of the containing line.
 * @param buffer the virtual buffer to use
 * @param offset the offset to expand.
 * @param maxLineLength the maximum length of a line.
 * @param useScreenLayout if true then lines will only break on block controls or line feed characters, if false then lines will break on all field nodes.
 * @param startOffset memory to place the calculated line start offset
 * @param endOffset memory to place the calculated line end offset
  * @return true if successfull, false otherwize.
 */ 
	DLLEXPORT int getLineOffsets([in] VBufRemote_bufferHandle_t buffer, [in] int offset, [in] int maxLineLength, [in] int useScreenLayout, [out] int *startOffset, [out] int *endOffset);

 }
