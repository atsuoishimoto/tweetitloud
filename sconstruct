###
#This file is a part of the NVDA project.
#URL: http://www.nvda-project.org/
#Copyright 2010 James Teh <jamie@jantrid.net>.
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###

import sys
import os
import _winreg
from glob import glob

# Import NVDA's versionInfo module.
import gettext
gettext.install("nvda", unicode=True)
sys.path.append("source")
import versionInfo
del sys.path[-1]

# Get the path to signtool.
try:
	with _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Microsoft SDKs\Windows") as sdksKey:
		signtool = os.path.join(_winreg.QueryValueEx(sdksKey, "CurrentInstallFolder")[0], "Bin", "signtool.exe")
except WindowsError:
	signtool = "signtool"

# Get the path to 7z.
try:
	szKey = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\7-Zip", 0, _winreg.KEY_READ)
except WindowsError:
	try:
		szKey = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\7-Zip", 0, _winreg.KEY_WOW64_64KEY | _winreg.KEY_READ)
	except WindowsError:
		szKey = None
if szKey:
	with szKey:
		sz = os.path.join(_winreg.QueryValueEx(szKey, "Path")[0], "7z.exe")
else:
	sz = "7z"

# Get the path to makensis.
try:
	with _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\NSIS") as nsisKey:
		makensis = os.path.join(_winreg.QueryValueEx(nsisKey, None)[0], "makensis.exe")
except WindowsError:
	makensis = "makensis"

# Get the path to pygettext.
pygettext = os.path.join(sys.exec_prefix, "Tools", "i18n", "pygettext.py")

def keyCommandsDocTool(env):
	import keyCommandsDoc
	kcdAction=env.Action(
		lambda target,source,env: not keyCommandsDoc.KeyCommandsMaker(source[0].path,target[0].path).make(),
		lambda target,source,env: 'Generating %s'%target[0],
	)
	kcdBuilder=env.Builder(
		action=kcdAction,
		suffix='.t2t',
		src_suffix='.t2t',
	)
	env['BUILDERS']['keyCommandsDoc']=kcdBuilder

keyCommandsLangBlacklist=set(['cs','ja'])

vars = Variables()
vars.Add("version", "The version of this build", versionInfo.version)
vars.Add(BoolVariable("release", "Whether this is a release version", False))
vars.Add("publisher", "The publisher of this build", "unknown")
vars.Add(PathVariable("certFile", "The certificate file with which to sign executables", "",
	lambda key, val, env: not val or PathVariable.PathIsFile(key, val, env)))
vars.Add("certPassword", "The password for the private key in the signing certificate", "")
vars.Add(PathVariable("outputDir", "The directory where the final built archives and such will be placed", "output",PathVariable.PathIsDirCreate))
vars.Add(ListVariable('targetArchitectures','Which architectures should NVDA support?','all',['x86','x86_64']))

#Check for any unknown variables
unknown=vars.UnknownVariables().keys()
if len(unknown)>0:
	print "Unknown commandline variables: %s"%unknown
	Exit(1)

env = Environment(variables=vars,tools=["textfile","gettext","t2t",keyCommandsDocTool])
version = env["version"]
release = env["release"]
certFile = env["certFile"]
certPassword = env["certPassword"]
userDocsDir=Dir('user_docs')
sourceDir = Dir("source")
Export('sourceDir')
clientDir=Dir('extras/controllerClient')
Export('clientDir')
sourceLibDir=sourceDir.Dir('lib')
Export('sourceLibDir')
sourceLibDir64=sourceDir.Dir('lib64')
Export('sourceLibDir64')
buildDir = Dir("build")
outFilePrefix = "nvda{type}_{version}".format(type="" if release else "_snapshot", version=version)
outputDir=Dir(env['outputDir'])

#Process nvdaHelper scons files
env.SConscript('nvdaHelper/sconscript',exports=['env'])

#Allow all NVDA's gettext po files to be compiled in source/locale
for po in env.Glob(sourceDir.path+'/locale/*/lc_messages/*.po'):
	moFile=env.gettextMoFile(po)
	#gettextMoFile can not be run in parallel so make sure scons knows this
	env.SideEffect('_gettextMoFile',moFile)

#Allow all key command t2t files to be generated from their userGuide t2t sources
for lang in os.listdir(userDocsDir.path):
	if lang in keyCommandsLangBlacklist: continue
	for ug in glob(os.path.join(userDocsDir.path,lang,'userGuide.t2t')):
		env.keyCommandsDoc(File(ug).File('keyCommands.t2t'),ug)

#Allow all t2t files to be converted to html in user_docs
#As we use scons Glob this will also include the keyCommands.t2t files
for t2tFile in env.Glob(os.path.join(userDocsDir.path,'*','*.t2t')):
	#txt2tags can not be run in parallel so make sure scons knows this
	htmlFile=env.txt2tags(t2tFile)
	env.SideEffect('_txt2tags',htmlFile)

env.Depends(sourceDir,userDocsDir)

#Generate all needed comtypes COM interfaces
comInterfaces=env.Command(sourceDir.Dir('comInterfaces'),None,[['cd',sourceDir.path,'&&',sys.executable,'generateComInterfaces.py']])
env.AlwaysBuild(comInterfaces)
env.Depends(comInterfaces,sourceDir.Dir('typelibs'))


# A builder to generate an NVDA distribution.
def NVDADistGenerator(target, source, env, for_signature):
	buildVersionFn = os.path.join(str(source[0]), "_buildVersion.py")
	# Make the NVDA build use the specified version.
	# We don't do this using normal scons mechanisms because we want it to be cleaned up immediately after this builder
	# and py2exe will cause bytecode files to be created for it which scons doesn't know about.
	action = [lambda target, source, env: file(buildVersionFn, "w").write('version = "%s"' % version)]

	buildCmd = ["cd", source[0].path, "&&",
		sys.executable]
	if release:
		buildCmd.append("-O")
	buildCmd.extend(("setup.py", "build", "--build-base", buildDir.abspath,
		"py2exe", "--dist-dir", target[0].abspath))
	if release:
		buildCmd.append("-O1")
	action.append(buildCmd)

	if env.get("uiAccess"):
		buildCmd.append("--enable-uiAccess")
		for prog in "nvda", "nvda_slave", "nvda_service":
			action.append(signExec[:-1] + [target[0].File("%s.exe" % prog)])

	for ext in "", "c", "o":
		action.append(Delete(buildVersionFn + ext))

	return action
env["BUILDERS"]["NVDADist"] = Builder(generator=NVDADistGenerator, target_factory=Dir)

# A builder to generate a 7-Zip self-extracting archive.
def SzSfxGenerator(target, source, env, for_signature):
	cmd = []
	relativeToSourceDir = env.get("relativeToSourceDir", False)
	if relativeToSourceDir:
		cmd.extend(("cd", source[0], "&&"))
	cmd.extend((sz, "a", "-mx=9", "-sfx7z.sfx", target[0].abspath, "." if relativeToSourceDir else "$SOURCES"))
	return [cmd]
env["BUILDERS"]["SzSfx"] = Builder(generator=SzSfxGenerator)

# An action to sign an executable with certFile.
signExec = [signtool, "sign", "/f", certFile]
if certPassword:
	signExec.extend(("/p", certPassword))
signExec.append("$TARGET")

portableDist = env.NVDADist("dist", sourceDir, uiAccess=False)
if certFile:
	# If uiAccess is to be enabled, it must only be enabled on the installer.
	# Therefore, a separate distribution is needed.
	installerDist = env.NVDADist("dist_installer", sourceDir, uiAccess=True)
else:
	installerDist = portableDist
# portableDist and installerDist don't get rebuilt even if sourceDir changes, so force them to always be built.
#env.AlwaysBuild(portableDist, installerDist)
# Dir node targets don't get cleaned, so cleaning of the dist nodes has to be explicitly specified.
env.Clean(portableDist, portableDist)
env.Clean(installerDist, installerDist)
# Clean the intermediate build directory.
env.Clean([portableDist, installerDist], buildDir)

portableArchive = env.SzSfx(outputDir.File("%s_portable.exe" % outFilePrefix), portableDist, relativeToSourceDir=True)
if certFile:
	env.AddPostAction(portableArchive, [signExec])
env.Alias("portable", portableArchive)

installer = env.Command(outputDir.File("%s_installer.exe" % outFilePrefix), ["installer/nvda.nsi", installerDist],
	[[makensis, "/V2",
	"/DVERSION=$version", "/DPUBLISHER=$publisher",
	"/DNVDASourceDir=${SOURCES[1].abspath}", "/XOutFile ${TARGET.abspath}",
	"$SOURCE"]])
if certFile:
	env.AddPostAction(installer, [signExec])
env.Alias("installer", installer)

clientArchive = env.SzSfx(outputDir.File("%s_controllerClient.exe" % outFilePrefix),clientDir, relativeToSourceDir=True)
env.Alias("client", clientArchive)

changesFile=env.Command(outputDir.File("%s_changes.html" % outFilePrefix),userDocsDir.File('en/changes.html'),Copy('$TARGET','$SOURCE'))
env.Alias('changes',changesFile)

def makePot(target, source, env):
	# Generate the pot.
	if env.Execute([["cd", sourceDir, "&&",
			sys.executable, pygettext,
			"-o", target[0].abspath, "*.py", r"*\*.py", r"*\*\*.py"]]) != 0:
		raise RuntimeError("pygettext failed")

	# Tweak the headers.
	potFn = str(target[0])
	tmpFn = "%s.tmp" % potFn
	with file(potFn, "rt") as inp, file(tmpFn, "wt") as out:
		for lineNum, line in enumerate(inp):
			if lineNum == 1:
				line = line.replace("YEAR ORGANIZATION", "2006-2010 NVDA Contributors")
			elif lineNum == 2:
				# Delete line.
				continue
			elif lineNum == 6:
				line = line.replace("PACKAGE VERSION", version)
			elif lineNum == 12:
				line = line.replace("CHARSET", "UTF-8")
			elif lineNum == 13:
				line = line.replace("ENCODING", "8bit")
			out.write(line)
	os.remove(potFn)
	os.rename(tmpFn, potFn)

pot = env.Command(outputDir.File("%s.pot" % outFilePrefix),
	# Don't use sourceDir as the source, as this depends on comInterfaces and nvdaHelper.
	# We only depend on the Python files.
	[f for pattern in ("*.py", r"*\*.py", r"*\*\*.py") for f in env.Glob(os.path.join(sourceDir.path, pattern))],
	makePot)

env.Alias("pot", pot)

env.Default(portableDist)
